"""
Django settings for tests project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import sys, os
import proj.signal_loggers as request_logger
from . import settings_local
# Server specific variable setup
computer_name = os.getenv('COMPUTERNAME')
dbhost = os.getenv('DB_HOST', '.\sqlexpress')
if 'test' in sys.argv:
    dbhost = '.\sqlexpress'
    dbname = 'spec_qa'
    dbuid = ''
    dbpasswd = ''
else: # pragma no cover
    dbname = os.getenv('DB_NAME', 'spec_qa')
    dbhost = os.getenv('DB_HOST', '.\sqlexpress')
    dbuid = os.getenv('DB_USER', '')
    dbpasswd = os.getenv('DB_PASSWD', '')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
FRONTEND_DIR = os.path.join(BASE_DIR,'frontend')
STATIC_DIR = os.path.join(FRONTEND_DIR, 'static')
TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('APP_PROD_SKEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',  # https://www.django-rest-framework.org/api-guide/authentication/
    'spec.apps.SpecConfig',
    'user.apps.UserConfig',

    'django_cleanup.apps.CleanupConfig', # should be placed after your apps

]

MIDDLEWARE = [
    'utils.middleware.TimeStampMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CSRF_TRUSTED_ORIGINS = ['http://localhost:8081', 'http://127.0.0.1:8080', 'http://127.0.0.1:8081',  'http://127.0.0.1:8000',]
TOKEN_EXPIRED_AFTER_SECONDS = 60*60*24*365 # one year (These are for automated interfaces)
SESSION_COOKIE_AGE = 60 * 60 * 4 # four hours of web inactivity (These are for web interactions)

ROOT_URLCONF = 'proj.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [FRONTEND_DIR, TEMPLATE_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': [
        'rest_framework.filters.SearchFilter',
        ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'user.authentication.ExpiringTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 100
}

WSGI_APPLICATION = 'proj.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases


DATABASES = {
    "default": {
        "ENGINE": "mssql",
        "NAME": dbname,
        "HOST": dbhost,
        "USER": dbuid,
        "PASSWORD": dbpasswd,
        "OPTIONS": {"driver": "ODBC Driver 17 for SQL Server",
        },
    },
}
AUTHENTICATION_BACKENDS = [
    "django_auth_ldap.backend.LDAPBackend",
    "django.contrib.auth.backends.ModelBackend",
]

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    STATIC_DIR,
]

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = settings_local.LOGGING
request_logger.log_all_requests()

# LDAP settings are in setting_local
# but need to be in settings.py so they are found by the libraries
AUTH_LDAP_CONNECTION_OPTIONS = settings_local.AUTH_LDAP_CONNECTION_OPTIONS
AUTH_LDAP_SERVER_URI = settings_local.AUTH_LDAP_SERVER_URI
AUTH_LDAP_START_TLS = settings_local.AUTH_LDAP_START_TLS
AUTH_LDAP_BIND_DN = settings_local.AUTH_LDAP_BIND_DN
AUTH_LDAP_BIND_PASSWORD = os.getenv('LDAP_PASSWD')
AUTH_LDAP_USER_SEARCH = settings_local.AUTH_LDAP_USER_SEARCH
AUTH_LDAP_GROUP_SEARCH = settings_local.AUTH_LDAP_GROUP_SEARCH
AUTH_LDAP_GROUP_TYPE = settings_local.AUTH_LDAP_GROUP_TYPE
AUTH_LDAP_USER_ATTR_MAP = settings_local.AUTH_LDAP_USER_ATTR_MAP
AUTH_LDAP_USER_FLAGS_BY_GROUP = settings_local.AUTH_LDAP_USER_FLAGS_BY_GROUP

# Cache distinguished names and group memberships for an hour to minimize
# LDAP traffic.
AUTH_LDAP_CACHE_TIMEOUT = 3600